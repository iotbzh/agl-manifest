#!/bin/bash

################################################################################

# The MIT License (MIT)
#
# Copyright (c) 2016 St√©phane Desneux <sdx@iot.bzh>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

################################################################################

# load libzh
. $(dirname $BASH_SOURCE)/libzh.sh

BUILD_FLAVOUR=iotbzh
BUILD_MACHINES="porter m3ulcb qemux86-64 raspberrypi3 intel-corei7-64"
BUILD_TARGET=agl-demo-platform-crosssdk
BUILD_OPTIONS=
BUILD_FEATURES=

# source conf file for this script if any
CONF=$(basename $0).conf
for x in /etc/$CONF $XDT_DIR/$CONF $HOME/$CONF; do
	[[ -f $x ]] && { info "Loading config file $x"; . $x; }
done

[[ $# -gt 0 ]] && { warning "Overriding machines from command line: BUILD_MACHINE=$@"; BUILD_MACHINES="$@"; }

mkdir -p $XDT_BUILD

CMDLOG=$XDT_BUILD/build_all.cmd
RESLOG=$XDT_BUILD/build_all.log

rm -f $CMDLOG $RESLOG

function log_result() {
	local machine=$1
	local flavour=$2
	local dtstr=$3
	local rc=$4
	local comment=$5

	echo $machine $flavour $dtstr $([[ $rc == 0 ]] && echo "OK" || echo "FAIL($rc)") $comment  >>$RESLOG
}

function run_prepare_meta() {
	echo "--------------------" >>$CMDLOG
	echo prepare_meta "$@" >>$CMDLOG
	prepare_meta "$@"
}

function runbitbake() {
	local ts0=$(date +%s)
	echo bitbake "$@" >>$CMDLOG
	bitbake "$@" 
	local rc=$?
	local ts1=$(date +%s)
	local dt=$(( $ts1 - $ts0 ))
	local dtstr=$(date +%H:%M:%S -u --date="@$dt")
	eval $(bitbake -e | grep ^MACHINE_ARCH)
	log_result $machine $BUILD_FLAVOUR $dtstr $rc 
	return $rc
}

baseopts="-f $BUILD_FLAVOUR -o $XDT_DIR -l $HOME/mirror/ -e wipeconfig -e cleartemp -e rm_work $BUILD_OPTIONS"
extraopts=""

for machine in $BUILD_MACHINES; do
	case $machine in
		porter|m3ulcb|h3ulcb|salvator|kingfisher)
			opts="$baseopts -t $machine -p $HOME/mirror/proprietary-renesas-r-car/ $extraopts"
			;;
		*)
			opts="$baseopts -t $machine $extraopts"
			;;
	esac

	run_prepare_meta $opts $BUILD_FEATURES || { 
		log_result $machine $BUILD_FLAVOUR "-" 1 "[prepare_meta failure]";
		continue;
	}

	. $XDT_BUILD/$machine/agl-init-build-env
	for target in $BUILD_TARGET; do
		runbitbake $BUILD_TARGET
	done
			
	# add option "keepcache" after first build
	extraopts="-e keepcache"
done

info "=========== BUILD SUMMARY ============"
cat $RESLOG

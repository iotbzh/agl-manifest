#!/bin/bash 

set -e

. /etc/xdtrc

MYNAME=$(basename $0)
SCRIPTDIR=$(cd $(dirname $0) && pwd -P)

FLAVOUR=$(basename $SCRIPTDIR)
MACHINE=

SERVER_PRIVATE=ein@ein
SERVER_PRIVATE_DIR=/data/custom-builds
DOWNLOAD_PRIVATE_URL=ein::custom  # FLAVOUR/MACHINE/VERSION

SERVER_PUBLIC=apache@vm-www
SERVER_PUBLIC_DIR=/download/public/$(date +%Y)/AGL_Images
DOWNLOAD_PUBLIC_URL=https://\${CREDENTIALS}iot.bzh/$SERVER_PUBLIC_DIR

stdout_in_terminal=0
[[ -t 1 ]] && stdout_in_terminal=1
function color {
    [[ $stdout_in_terminal == 0 ]] && return
    for k in $*; do
        case $k in
            bold) tput bold 2>/dev/null;;
            none) tput sgr0 2>/dev/null;;
            *) tput setaf $k 2>/dev/null;;
        esac
    done
}

color_green=$(color bold 2)
color_yellow=$(color bold 3)
color_red=$(color bold 1)
color_blue=$(color bold 4)
color_gray=$(color 250)
color_none=$(color none)

function error() {
    echo "${color_red}$@${color_none}" >&2
}
function fatal() { error "$@"; exit 1; }

function warning() {
    echo "${color_yellow}$@${color_none}" >&2
}

function info() {
    echo "${color_green}$@${color_none}" >&2
}

function log() {
    echo "$@" >&2
}

function __usage() {
	cat <<EOF >&2
Usage: $MYNAME [options]
   
Options:
   -h|--help: get this help
   -n|--dryrun: dry run mode (do nothing)
   -m|--machine: machine name 
      ex: m3ulcb, h3ulcb, qemux86-64, intel-corei7-64, raspberrypi3 ...
   -s|--server: ssh server handle (user@host)
   -f|--flavour: set flavour manually (default: autodetected from dir name)
   -d|--dir: server dir
      ex: /download/public/$(date +%Y)/AGL_Images/
   -u|--url: set download url
   -p|--public: use public server by default (may be overriden by -s)
EOF
}

function __parseopts() {
   local opts="-o m:,s:,f:,d:,u:,p,n,h --long machine:,server:,flavour:,dir:,url:,public,dryrun,help" tmp
   tmp=$(getopt $opts -n "$COMMAND" -- "$@" 2>/dev/null) || {
      tmp=$(getopt $opts -n "$COMMAND" -- "$@" 2>&1 >/dev/null) || true
      error $tmp; __usage; exit 1;
   }
   eval set -- $tmp

   while true; do
      case "$1" in 
         -h|--help)		 __usage; exit 0;;
         -m|--machine)	 MACHINE=$2; shift 2;;
         -s|--server)    SERVER=$2; shift 2;;
         -d|--dir)       SERVER_DIR=$2; shift 2;;
         -n|--dryrun)    dryrun=1; shift;;
         -p|--public)    PUBLIC=1; shift;;
		 -f|--flavour)   FLAVOUR=$2; shift 2;;
		 -u|--url)       DOWNLOAD_URL=$2; shift 2;;
         --)             shift; break;;
         *)              error "Internal error"; exit 56;;
      esac
   done
}

__parseopts "$@"

[[ -z "$MACHINE" ]] && { error "Invalid machine"; __usage; exit 2; }
[[ -z "$FLAVOUR" ]] && { error "Invalid flavour"; __usage; exit 2; }

if [[ -z "$SERVER" ]]; then
	case "$PUBLIC" in
		yes|1|true) SERVER=$SERVER_PUBLIC;;
		*) SERVER=$SERVER_PRIVATE;;
	esac
fi
if [[ -z "$SERVER_DIR" ]]; then
	case "$PUBLIC" in
		yes|1|true) SERVER_DIR=$SERVER_PUBLIC_DIR;;
		*) SERVER_DIR=$SERVER_PRIVATE_DIR;;
	esac
fi
if [[ -z "$DOWNLOAD_URL" ]]; then
	case "$PUBLIC" in
		yes|1|true) DOWNLOAD_URL=$DOWNLOAD_PUBLIC_URL;;
		*) DOWNLOAD_URL=$DOWNLOAD_PRIVATE_URL;;
	esac
fi

info "Using machine $MACHINE"
info "Destination will be $SERVER:$SERVER_DIR/$FLAVOUR/$MACHINE/<image_version>"

tmpdir=$(mktemp -d /tmp/$MYNAME.XXXXXX)
trap "echo 'cleaning tempdir $tmpdir'; rm -rf $tmpdir" STOP INT QUIT EXIT 

# rsync will copy permissions to server: folder must be readable by apache group to be published
chmod 755 $tmpdir

##################################################################################

IMGDIR=$XDT_BUILD/$MACHINE/tmp/deploy/images/$MACHINE
SDKDIR=$XDT_BUILD/$MACHINE/tmp/deploy/sdk/
VERSION=

# locate and copy image
[[ ! -d $IMGDIR ]] && fatal "No images dir in $IMGDIR"
pushd $IMGDIR 2>/dev/null
	lnkname=$(find . -type l -name "*.wic.xz")
	[[ ! -e $lnkname ]] && lnkname=$(find . -type l -name "*.vmdk")
	[[ ! -e $lnkname ]] && fatal "No image link found in $IMGDIR" || echo "Found image link $lnkname"
	imgfile=$(readlink $lnkname)
	[[ ! -f $imgfile ]] && fatal "No image found in $IMGDIR" || echo "Found image file $imgfile"

	bmaplnkname=$(find . -type l -name "*.wic.bmap")
	[[ -e $bmaplnkname ]] && bmapfile=$(readlink $bmaplnkname) && echo "Found bmap link $bmaplnkname, file $bmapfile"

	# determine version
	[[ "$imgfile" =~ -([0-9]+).rootfs.wic. ]] && VERSION=${BASH_REMATCH[1]} || fatal "Unable to find image version"
	info "Detected image version $VERSION"

	mkdir -p $tmpdir/images
	info "Copying image..."
	for x in \
		$imgfile \
		$bmapfile \
		build-info \
	; do
		[[ -e $x ]] && cp -av $x $tmpdir/images/
	done

	for x in $(ls $tmpdir/images/*.{vmdk,ext4} 2>/dev/null); do
		info "Compressing images..."
		xz -T0 -v $x
		imgfile="${imgfile}.xz"
		lnkname="${lnkname}.xz"
	done
	ln -sfv $imgfile $tmpdir/images/$lnkname
	[[ -n "$bmaplnkname" ]] && ln -sfv $bmapfile $tmpdir/images/$bmaplnkname

	# firmware
	fwfiles=$(find  -type f -name "*.srec")
	if [[ -n "$fwfiles" ]]; then
		info "Copying firmware for R-car gen3"
		mkdir -p $tmpdir/firmware
		cp -av $fwfiles $tmpdir/firmware/
		cat <<EOF >$tmpdir/firmware/README.firmware
The files here can be used to flash the $MACHINE board firmware.

Full procedure is detailed here depending on the board:
* for M3: https://elinux.org/R-Car/Boards/M3SK#Flashing_firmware
* for H3: https://elinux.org/R-Car/Boards/H3SK#Flashing_firmware
EOF
	fi
popd 2>/dev/null

# locate and copy SDK
[[ ! -d $SDKDIR ]] && warning "No SDK dir in $SDKDIR"
pushd $SDKDIR 2>/dev/null
	sdkfile=$(find . -type f -name "poky-*.sh")
	if [[ ! -f $sdkfile ]]; then
		warning "Unable to find SDK file in $SDKDIR"
	else
		mkdir -p $tmpdir/sdk
		info "Copying SDK..."
		cp -av * $tmpdir/sdk/
		ln -sfv $sdkfile $tmpdir/sdk/agl-sdk-latest.sh
	fi
popd 2>/dev/null

# doc
for ext in $MACHINE.html generic.html; do
	docfiles=$(find $SCRIPTDIR/doc -name "*.$ext")
	[[ -n "$docfiles" ]] && {
		info "Copying doc files"
		for x in $docfiles; do
			dst=$(basename $x .$ext).html
			[[ ! -e $tmpdir/$dst ]] && cp -av $x $tmpdir/$dst
		done
	}
done

# compute destination directories
MACDIR=$SERVER_DIR/$FLAVOUR/$MACHINE
DESTDIR=$MACDIR/$VERSION

# download script
if [[ -n "$DOWNLOAD_URL" ]]; then
	info "Generating download script..."
	pushd $tmpdir 2>/dev/null

	script="download-snapshot.sh"
	cat <<'EOF' >$script
#!/bin/bash

set -e

function info() { echo "$@" >&2; }
function error() { echo "ERROR: $@" >&2; }
EOF

	cat <<EOF >>$script
DOWNLOAD_URL=$DOWNLOAD_URL
MACHINE=$MACHINE
VERSION=$VERSION
FLAVOUR=$FLAVOUR

EOF

	cat <<'EOF' >>$script
function usage() {
	cat <<EOU >&2
Usage: download-snapshot [options]
   -m|--meta: show snapshot metadata (machine, flavour, version)
   -d|--destination: set destionation dir (default: .)
   -s|--sdk: download only the SDK
   -i|--images: download only the images
   -h|--help: this help

To execute this script directly from URL, run:
# curl -sL http://...../download-snapshot.sh | bash -s -- [arguments]
EOU
EOF

if [[ "$DOWNLOAD_URL" =~ \{CREDENTIALS\} ]]; then
	cat <<'EOF' >>$script
		info "-------------- IMPORTANT ---------------------------"
		info "Downloading may require credentials"
		info "They can be specified by running prior to execution:"
		info "   export CREDENTIALS=\"user:password@\""
		info "----------------------------------------------------"
EOF
fi

	cat <<'EOF' >>$script
}
TEMP=$(getopt -o md:asih --long meta,destination:,all,sdk,images,help -n download-snapshot.sh -- "$@")
[[ $? != 0 ]] && { usage; exit 1; }
eval set -- "$TEMP"

ALL=1
IMAGES=0
SDK=0
DEST=.

while true; do
	case "$1" in
		-m|--meta) SHOWMETA=1; shift;;
		-d|--destination) DEST=$2; shift 2;;
		-s|--sdk) ALL=0; SDK=1; shift;;
		-i|--images) ALL=0; IMAGES=1; shift;;
		-h|--help) HELP=1; shift ;;
		--) shift; break;;
		*) error "Internal error"; exit 1;;
	esac
done

[[ "$HELP" == 1 ]] && { usage; exit 1; }
if [[ "$SHOWMETA" == 1 ]]; then
	cat <<EOM
MACHINE=$MACHINE
VERSION=$VERSION
FLAVOUR=$FLAVOUR
DOWNLOAD_URL=$DOWNLOAD_URL
EOM
	exit 1
fi
[[ "$ALL" == 1 ]] && { IMAGES=1; SDK=1; }

info "Using destination dir: $DEST/$FLAVOUR/$MACHINE/$VERSION"
mkdir -p $DEST/$FLAVOUR/$MACHINE/$VERSION
pushd $DEST/$FLAVOUR/$MACHINE/$VERSION
EOF

	if [[ "$DOWNLOAD_URL" =~ ^http ]]; then
		# get all the files
		for x in $(find . -type f) ./files.sha256; do
			x=${x#./} # remove leading ./

			cond=""
			econd=""

			if [[ $x =~ ^sdk/ ]]; then
				cond="if [[ \"\$SDK\" == 1 ]]; then"
				econd="fi"
			elif [[ $x =~ ^images/ ]]; then
				cond="if [[ \"\$IMAGES\" == 1 ]]; then"
				econd="fi"
			fi
			cat <<EOF >>$script
$cond
which wget >/dev/null 2>&1 || { error "Unable to find command wget. Please install package 'wget'."; exit 2; }
mkdir -p $(dirname $x)
wget -O $x \$DOWNLOAD_URL/\$FLAVOUR/\$MACHINE/\$VERSION/$x
$econd
EOF
		done
	else
		# assume rsync folder
	cat <<EOF >>$script
which rsync >/dev/null 2>&1 || { error "Unable to find command rsync. Please install package 'rsync'."; exit 2; }
opts=""
[[ "\$SDK" == 0 ]] && opts="\$opts --exclude=sdk/"
[[ "\$IMAGES" == 0 ]] && opts="\$opts --exclude=images/"
rsync -Pa \$opts \$DOWNLOAD_URL/\$FLAVOUR/\$MACHINE/\$VERSION/ ./
EOF
	fi

	popd 2>/dev/null
fi

# generate checksums
info "Generating checksums..."
pushd $tmpdir 2>/dev/null
sha256sum $(find . -type f) >files.sha256
popd 2>/dev/null

if [[ -n "$dryrun" ]]; then
	warning "DRY RUN ENABLED"
	pushd $tmpdir 2>/dev/null
	ls -alR
	popd 2>/dev/null
else
	[[ -z "$VERSION" ]] && fatal "Invalid build version"

	# create remote dir
	info "Creating remote dir $DESTDIR/"
	ssh $SERVER mkdir -p $DESTDIR

	# send files
	RSYNCPATH=$SERVER:$DESTDIR
	rsync -Pav --delete $tmpdir/ $RSYNCPATH/

	# create links on server
	CMD="ln -snfv $(basename $DESTDIR) $MACDIR/latest"
	CMD="$CMD; rm -f $MACDIR/latest_is_*"
	CMD="$CMD; echo $VERSION >$MACDIR/latest.txt"

	ssh $SERVER "$CMD"

	info "Images successfully pushed to: $RSYNCPATH"
fi

#!/bin/bash

################################################################################
# 
# Copyright (c) 2016-2019 St√©phane Desneux <sdx@iot.bzh>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

set -e

# external config can be loaded (if  any)
SCRIPT=$(basename $BASH_SOURCE)

CONFIG_FILES="$BASH_SOURCE.conf /etc/$SCRIPT.conf"
if [[ -f /etc/xdtrc ]]; then
	. /etc/xdtrc
	CONFIG_FILES="$CONFIG_FILES $XDT_DIR/$SCRIPT.conf"
fi
CONFIG_FILES="$CONFIG_FILES ~/.config/$SCRIPT.conf"

# --------- default values (can be overriden in config file)
# global variable containing the git repository where all manifests are stored
MANIFEST_URL=https://github.com/iotbzh/agl-manifest.git

# this script canonical url
SELF_URL=https://raw.githubusercontent.com/iotbzh/agl-manifest/master/$SCRIPT
# or
# accessible trough git protocol (ssh key typically):
#SELF_URL=git@yourserver:project.git
#SELF_URL_BRANCH=mybranch
#SELF_URL_PATH=path/to/the/script/prepare_meta

FLAVOUR=iotbzh
AGL_FEATURES="agl-devel agl-netboot agl-appfw-smack agl-demo agl-localdev"
DSTDIR=$(pwd -P)
LOCALMIRROR=
REMOTEMIRROR=
PROPRIETARY_RENESAS_DIR=
TARGET=m3ulcb
JUST_UPGRADE=

#default options values
option_ccache=0
option_upgrade=1
option_wipeconfig=0
option_keepcache=0
option_rm_work=0
option_keepmanifest=0
option_cleartemp=0

# --------- default values ------------------------------------

echo "CONFIG FILES: $CONFIG_FILES" >&2
for x in $CONFIG_FILES; do
	[[ -f $x ]] && . $x
done

VERSION=1.0.6

function usage() {
	cat <<EOF >&2
Usage: $SCRIPT [options] [agl_features]

Version: $VERSION

AGL Features: $AGL_FEATURES

Options:
   -f|--flavour <flavour[/tag_or_revision]>
      what flavour to us
      default: 'iotbzh'
      possible values: 'chinook','chinook-next','rel2.0', 'chromium', 'iotbzh' ... see agl-manifest git repository
   -o|--outputdir <destination_dir>
      output directory where subdirectories will be created: meta, build, ...
      default: current directory (.)
   -l|--localmirror <directory>
      specifies a local mirror directory to initialize meta, download_dir or sstate-cache
      default: none
   -r|--remotemirror <url>
      specifies a remote mirror directory to be used at build time for download_dir or sstate-cache
      default: none
   -p|--proprietary <directory>
      Directory containing Renesas proprietary drivers for RCar platform (2 zip files)
      default: none
   -e|--enable <option>
      enable a specific option
      available options:
         * upgrade: allow the script to check for upgrades (default: enabled)
         * ccache: setup bitbake configuration with ccache (default: disabled)
         * wipeconfig: clear existing bitbake configuration if any (default: disabled)
         * keepcache: do not overwrite sstate-cache or download dir (default: disabled)
         * rm_work: do not keep working directory after each yocto package build. (Save LOT of space. default: disabled)
         * keepmanifest: do not update agl-manifest (local git tree) by pulling from remote git repo: this allows local updates
         * cleartemp: clear the temporary build directory, usually .../build/tmp (default: disabled)
   -d|--disable <option>
      disable a specific option
      available options: same as --enable
   -t|--target <name>
      target platform
      default: porter
      valid options: porter, m3ulcb, h3ulcb, salvator, m3ulcb-kingfisher, intel-corei7-64, qemux86, qemux86-64, wandboard ...
   -u|--upgrade
      Check for and perform an update to the script without prompting user, then exit.
   -h|--help
      get this help

Example:
	$SCRIPT -f iotbzh/master -o /tmp/xdt -l /ssd/mirror -p /vol/xdt/proprietary-renesas-rcar/ -t porter agl-demo

EOF
	exit 1
}

stdout_in_terminal=0
[[ -t 1 ]] && stdout_in_terminal=1
function color {
	[[ $stdout_in_terminal == 0 ]] && return
	for k in $*; do
		case $k in
			bold) tput bold 2>/dev/null;;
			none) tput sgr0 2>/dev/null;;
			*) tput setaf $k 2>/dev/null;;
		esac
	done
}
color_green=$(color bold 2)
color_yellow=$(color bold 3)
color_red=$(color bold 1)
color_none=$(color none)

function error() {
	echo "${color_red}$@${color_none}" >&2
}

function warning() {
	echo "${color_yellow}$@${color_none}" >&2
}

function info() {
	echo "${color_green}$@${color_none}" >&2
}

function log() {
	echo "$@" >&2
}

# save global args in case we reuse them after upgrade
GLOBAL_ARGS=("$@")
TEMP=$(getopt -o f:o:l:r:p:e:d:t:uh --long flavour:,outputdir:,localmirror:,remotemirror:,proprietary:,enable:,disable:,target:,upgrade,help -n $SCRIPT -- "$@")
[[ $? != 0 ]] && usage
eval set -- "$TEMP"

while true; do
	case "$1" in
		-f|--flavour) FLAVOUR=$2; shift 2;;
		-o|--outputdir) DSTDIR=$(cd $2 && pwd -P); shift 2;;
		-l|--localmirror) LOCALMIRROR=$(cd $2 && pwd -P); shift 2;;
		-r|--remotemirror) REMOTEMIRROR=$2; shift 2;;
		-p|--proprietary) PROPRIETARY_RENESAS_DIR=$(cd $2 && pwd -P); shift 2;;
		-e|--enable) eval option_$2=1; shift 2;;
		-d|--disable) eval option_$2=0; shift 2;;
		-t|--target) TARGET=$2; shift 2;;
		-u|--upgrade) JUST_UPGRADE=1; shift ;;
		-h|--help) HELP=1; shift ;;
		--) shift; break;;
		*) error "Internal error"; exit 1;;
	esac
done

[[ "$HELP" == 1 ]] && usage

# Ensure upgrades are enabled if -u|--update specified
[[ "$JUST_UPGRADE" == 1 ]] && option_upgrade=1

# remaining args are AGL_FEATURES (if present, otherwise we use the default)
[[ $# != 0 ]] && AGL_FEATURES="$@"

# check git presence
which git 2>&1 >/dev/null || { error "Unable to find git command."; exit 1; }

BUILDDIR=$DSTDIR/build/$TARGET

info "=============== SUMMARY =================="
for v in \
	FLAVOUR \
	DSTDIR \
	TARGET \
	BUILDDIR \
	MANIFEST_URL \
	LOCALMIRROR \
	REMOTEMIRROR \
	PROPRIETARY_RENESAS_DIR \
	SELF_URL \
	SELF_URL_BRANCH \
	SELF_URL_PATH \
	; do
	log "$v : ${!v}"
done
info "=========================================="

################################ upgrade script ################################

function upgrade() {
	# get remote script
	local tempfile=$(mktemp /tmp/$SCRIPT.XXXXXXXX)
	trap "rm -f $tempfile" STOP INT QUIT EXIT

	log "Checking for upgrade ... "
	# first, download reference script
	case $SELF_URL in
		http://*|https://*)
			wget --quiet -O $tempfile $SELF_URL || { error "Unable to check for upgrade. Remote script not accessible"; rm -f $tempfile; return 0; }
			;;
		*)
			git archive --remote=$SELF_URL $SELF_URL_BRANCH $SELF_URL_PATH | tar xO $SELF_URL_PATH >$tempfile || { error "Unable to check for upgrade. Remote script not accessible"; rm -f $tempfile; return 0; }
			;;
	esac

	local rc
	{ diff -q $BASH_SOURCE $tempfile &>/dev/null; rc=$?; } || true # don't exit on error

	local return_or_exit=return
	[[ $JUST_UPGRADE ]] && return_or_exit=exit

	case $rc in
		0)
			info "Script $SCRIPT is up to date."
			rm $tempfile
			$return_or_exit 0
			;;
		1)
			info "a newer version of the script $SCRIPT is available."
			;;
		*)
			error "Error while checking for upgrade on script $SCRIPT"
			rm $tempfile
			$return_or_exit 0
			;;
	esac

	local ans=N
	if [[ "$JUST_UPGRADE" == "1" ]]; then
		#  No interactive query if -u|--upgrade specified
		ans=Y
	elif [[ -t 0 ]]; then # only if shell is run from a terminal (~interactive)
		read -p "Do you want to proceed with upgrade ? [Y/n] " ans
	fi

	case $ans in
		Y|y)
			log "Upgrading script..."
			cp -v $BASH_SOURCE ${BASH_SOURCE}.old
			cp -v $tempfile $BASH_SOURCE
			chmod +x $BASH_SOURCE
			rm $tempfile
			info "Upgraded successfully"
			[[ "$JUST_UPGRADE" == "1" ]] && exit 0
			exec $BASH_SOURCE "${GLOBAL_ARGS[@]}" --disable upgrade
			;;
		*)
			;;
	esac

	warning "Skipping upgrade."
	rm -f $tempfile
}

[[ "$option_upgrade" == "1" ]] && upgrade

################################ clone agl-manifest ############################

function clone_or_pull() {
	url=$1
	rev=${2:-}
	dir=$(basename $url .git)

	if [[ ! -d $dir ]]; then
		info "=== cloning $url / $rev into $PWD/$dir"
		git clone $url
	fi

	if [[ "$option_keepmanifest" == 0 ]]; then
		info "=== updating $url (rev=$rev) into $PWD/$dir"
		pushd $dir >/dev/null
			for x in $(git remote); do
				git fetch -p $x +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/*
				git fetch -t -f $x
			done
			[[ -z "$rev" ]] && rev=$(git rev-parse origin/HEAD)
			git reset --hard
			git clean -fd
			git checkout -f $rev
		popd >/dev/null
	else
		warning "Keeping $PWD/$dir unchanged"
	fi
}

mkdir -p $DSTDIR/meta

# init meta from mirror if any
for dir in ${LOCALMIRROR//:/ }; do
	if [[ -d $dir/meta ]]; then
		info "=== Copying $dir/meta to $DSTDIR/meta"
		if [[ "$option_keepmanifest" == 1 ]]; then
			rsync -a $dir/meta/ $DSTDIR/meta/
		else
			rsync -a --delete $dir/meta/ $DSTDIR/meta/
		fi
		break
	fi
done

pushd $DSTDIR/meta >/dev/null #{
	if [[ "$FLAVOUR" =~ / ]]; then
		flavour=${FLAVOUR%%/*}
		rev=${FLAVOUR#*/}
	else
		flavour=$FLAVOUR
		rev=
	fi

	clone_or_pull $MANIFEST_URL $rev

	MANIFEST_DIR=$DSTDIR/meta/$(basename $MANIFEST_URL .git)

	FLAVOUR_DIR=$MANIFEST_DIR/$flavour
	[[ ! -d $FLAVOUR_DIR ]] && { error "Unable to find flavour '$flavour'"; exit 1; }
	info "=== FLAVOUR_DIR: $FLAVOUR_DIR"

	# use latest manifest file
	for x in $FLAVOUR_DIR/*.manifest; do
		[[ -n "$MANIFEST_FILE" ]] && error "Multiple manifest files found. Skipping $MANIFEST_FILE."
		MANIFEST_FILE=$x
	done
	[[ ! -f $MANIFEST_FILE ]] && { error "Unable to find manifest file for flavour $FLAVOUR"; exit 1; }
	info "=== MANIFEST_FILE: $MANIFEST_FILE"

popd >/dev/null #}

################################ populate meta ############################

function checkout_gits() {
	local DESTDIR=$(cd ${1:-.} && pwd -P)
	local srcfile=$2
	local srcname=$(basename $(dirname $srcfile))/$(basename $srcfile)
	LANG=

	sed 's/#.*$//g' < $srcfile | # suppress comments
		awk '/[^[:space:]]+/ { if ($1 == "@include") { for(i=2;i<=NF;i++) { print "INCLUDE " $i}; } else {print "DIR  "$2; for(i=3;i<=NF;i++) { print "REPO "$i}; print "HASH "$1 } }' |
		while read tag value; do
			case $tag in
				DIR)
					info "=== $srcname: fetch/checkout $value"
					[[ -d "$DESTDIR/$value" ]] || mkdir -p "$DESTDIR/$value"
					[[ -d "$DESTDIR/$value/.git" ]] || git init "$DESTDIR/$value"
					cd "$DESTDIR/$value"
					;;
				REPO)
					name="${value%%=*}"
					url="${value#*=}"
					log "Repository: $value"
					if ! git remote | grep -q "^$name\$"; then
						git remote add "$name" "$url"
					elif ! git remote -v | awk '$1=="'$name'" && $2!="'$url'" {exit 1}'; then
						git remote set-url "$name" "$url"
					fi
					;;
				HASH)
					log "Using revision $value"
					sha="${value%%=*}"
					branch="${value#*=}"
					for x in $(git remote); do
						git fetch -p $x +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/* +refs/tags/*:refs/remote/tags/*
						git fetch -f -t $x
					done
					git checkout -f "$sha" -B "$branch"
					git clean -fd
					;;
				INCLUDE)
					[[ -f "$MANIFEST_DIR/$value" ]] && { info "=== $srcname: include manifest $value"; } || {
						error "Unable to find manifest to include: $value"
						return 1
					}
					checkout_gits $DESTDIR $MANIFEST_DIR/$value
					;;
			esac
		done

	# apply patches if any, for the current manifest
	patchdir=$(dirname $(realpath $srcfile))/patches
	if [[ -d $patchdir ]]; then 
		info "=== apply patches from $patchdir"
		for file in $(find $patchdir -name "*.patch" 2>/dev/null | sort); do
			meta=$(dirname $(realpath --relative-to=$patchdir $file))

			log "Patching meta $meta with patch $file"

			pushd $DSTDIR/meta/$meta >/dev/null
				patch -p1 <$file
			popd >/dev/null
		done
	fi
}

pushd $DSTDIR/meta >/dev/null #{
	checkout_gits . $MANIFEST_FILE
popd >/dev/null #}

##################################### setup build ######################################

info "=== setup build for $TARGET"

mkdir -p $BUILDDIR
mkdir -p $DSTDIR/downloads
mkdir -p $DSTDIR/sstate-cache

# wipe config if requested to do so
[[ "$option_wipeconfig" == "1" ]] && rm -rf $BUILDDIR/conf

# wipe temp dir if requested
[[ "$option_cleartemp" == "1" ]] && rm -rf $BUILDDIR/tmp

function call_aglsetup() {
	local script=$DSTDIR/meta/meta-agl/scripts/aglsetup.sh 
	[[ ! -f $script ]] && { error "Unable to find $script"; return 1; }

	# detect aglsetup version and add specific options if possible
	local baseopts=""
	# default version
	local AGLSETUP_VERSION=1.0.0
	# min version for --topic option
	local topic_minver=1.2.0

	source $script --version >/dev/null 2>&1 || true
	if [[ "$(echo -e "$AGLSETUP_VERSION\n$topic_minver" | sort -V | head -n1)" == $topic_minver ]]; then
		baseopts="$baseopts --topic 'flavour:$FLAVOUR'"
	fi

	# dump how aglsetup will be called
	# IMPORTANT NOTE: -f is added, so that run_aglsetup.sh can be called directly (and overrides configuration!)
	log "dumping aglsetup command line to $BUILDDIR/run_aglsetup.sh"
	echo "#!/bin/bash" >$BUILDDIR/run_aglsetup.sh
	if [[ -d "$PROPRIETARY_RENESAS_DIR" ]]; then
		echo "export XDG_DOWNLOAD_DIR=$PROPRIETARY_RENESAS_DIR" >>$BUILDDIR/run_aglsetup.sh
	fi
	cat <<EOF >>$BUILDDIR/run_aglsetup.sh
source $script -f $baseopts $@
cat <<EOM

---------------------------------------------------------
WARNING from $0:
     any extra config fragments generated by prepare_meta 
     in $BUILDDIR/conf/*.inc 
     are NOT added to local.conf
---------------------------------------------------------
EOM
EOF
	chmod +x $BUILDDIR/run_aglsetup.sh

	source $script $baseopts "$@" >/dev/null
}

pushd $DSTDIR/meta >/dev/null #{
	case "$TARGET" in
		porter|m3ulcb|h3ulcb|salvator|m3ulcb-kingfisher)
			if [[ -d "$PROPRIETARY_RENESAS_DIR" ]]; then
				log "Using proprietary Renesas drivers for target $TARGET"
				# cleanup spurious temp dir if any (may contain partially extracted files which lead to errors in rcar-genX setup scripts)
				rm -rf $DSTDIR/meta/binary-tmp
				# this will install the proprietary drivers at the right place and setup environment
				# XDG_DOWNLOAD_DIR is used by meta-renesas/meta-rcar-gen2/scripts/setup_mm_packages.sh script to find zip files
				export XDG_DOWNLOAD_DIR=$PROPRIETARY_RENESAS_DIR
				if [[ -f $DSTDIR/meta/meta-agl/scripts/aglsetup.sh ]]; then
					call_aglsetup -m $TARGET -b $BUILDDIR $AGL_FEATURES >/dev/null
				else
					# old setup script
					source $DSTDIR/meta/meta-agl/scripts/envsetup.sh $TARGET $BUILDDIR >/dev/null
				fi
				# temp binary dir is not cleaned up
				rm -rf $DSTDIR/meta/binary-tmp
				option_proprietary=1
			else
				log "Initializing for $TARGET board without proprietary drivers"
				export TEMPLATECONF=$DSTDIR/meta/meta-renesas/meta-rcar-gen2/conf
				source $DSTDIR/meta/poky/oe-init-build-env $BUILDDIR >/dev/null
			fi
			;;
		*)
			if [[ -f $DSTDIR/meta/meta-agl/scripts/aglsetup.sh ]]; then
				call_aglsetup -m $TARGET -b $BUILDDIR $AGL_FEATURES >/dev/null
			else
				# old setup script
				source $DSTDIR/meta/meta-agl/scripts/envsetup.sh $TARGET $BUILDDIR >/dev/null
			fi
			;;
	esac
popd >/dev/null #}

pushd $BUILDDIR >/dev/null #{

	info "=== conf: build.conf"

	# ----------------------- snapshot specific options -------------------------------
	cat <<EOF >conf/build.conf
# options to generate snapshots in containers

# remove intermediate files
# uncomment if work dir is to be copied
#INHERIT += "rm_work"

# download cache location
DL_DIR = "$DSTDIR/downloads"

# generate tarballs from git source directorys in download cache
# uncomment when generating a reference download cache
#BB_GENERATE_MIRROR_TARBALLS = "1"

# dump stats to be view by:
# poky/scripts/pybootchartgui/pybootchartgui.py -m 100 tmp/buildstats/<sometimestamp>
# USER_CLASSES += "buildstats"

# set state cache locations
SSTATE_DIR = "$DSTDIR/sstate-cache"
EOF

	# --------------------------- download caches ----------------------------------------

	info "=== conf: download caches"

	# local caches must be copied to current download dir to be used as a reference when copying
	for mirror in $(for x in ${LOCALMIRROR//:/ }; do echo $x/downloads; done); do
		[[ -d $mirror ]] && [[ "$option_keepcache" == "0" ]] && rsync -a --delete ${mirror}/ $DSTDIR/downloads/
	done

	# remote cache can only be referenced
	if [[ -n "$REMOTEMIRROR" ]]; then
		# add remote mirror
		cat <<EOF >>conf/build.conf

# define remote download cache mirror
PREMIRRORS += "\
	git://.*/.*   $REMOTEMIRROR/downloads \n \
	ftp://.*/.*   $REMOTEMIRROR/downloads \n \
	http://.*/.*  $REMOTEMIRROR/downloads \n \
	https://.*/.* $REMOTEMIRROR/downloads \n"
EOF
	fi

	# ----------------------------- sstate-cache ----------------------------

	info "=== conf: sstate caches"

	# local cache copied, as previously
	for mirror in $(for x in ${LOCALMIRROR//:/ }; do echo $x/sstate-cache; done); do
		[[ -d $mirror ]] && [[ "$option_keepcache" == "0" ]] && rsync -a --delete ${mirror}/ $DSTDIR/sstate-cache/
	done

	# remote cache, simply referenced
	if [[ -n "$REMOTEMIRROR" ]]; then
		cat <<EOF >>conf/build.conf

# define remote shared state cache mirror
SSTATE_MIRRORS += "file://.* $REMOTEMIRROR/sstate-cache/PATH \n"
EOF
	fi

	# ----------------------------------- ccache -----------------------------


	if [[ "$option_ccache" == 1 ]]; then
		info "=== conf: ccache"
		for mirror in $(for x in ${LOCALMIRROR//:/ }; do echo $x/ccache; done); do
			[[ -d $mirror ]] && [[ "$option_keepcache" == "0" ]] && rsync -a --delete ${mirror}/ $DSTDIR/ccache/
		done

		mkdir -p $DSTDIR/ccache
		CCACHE_DIR=$DSTDIR/ccache ccache -M 8G # set cache max size to 8G

		cat <<EOF >>conf/build.conf

# enable CCACHE
INHERIT += "ccache"
CCACHE_DIR = "$DSTDIR/ccache"
# workaround ncurses build problem with ccache
ENABLE_WIDEC_class-native = "false"
ENABLE_WIDEC_class-nativesdk = "false"
EOF
	fi

	# ----------------------------------- rm_work -----------------------------


	if [[ "$option_rm_work" == 1 ]]; then
		info "=== conf: rm_work"
		sed -ri 's:^#(INHERIT.*"rm_work") *$:\1:' conf/build.conf
	fi

	# ------------------------------- include build.conf in local.conf ------------------------------------

	info "=== conf: local.conf"

	if ! grep -q "^require conf/build.conf" conf/local.conf; then
		cat <<'EOF' >>conf/local.conf
# include extra conf files
require conf/build.conf
EOF
	fi

	# --------------------------- handle extra config files coming with agl-manifest -----------------------

	for tgtfile in bblayers local; do
		[[ "$option_proprietary" == 1 ]] && PROPFILES="${tgtfile}_proprietary.conf.inc ${TARGET}_${tgtfile}_proprietary.conf.inc"

		for file in ${tgtfile}.conf.inc ${TARGET}_${tgtfile}.conf.inc $PROPFILES; do
			if [[ -f $FLAVOUR_DIR/$file ]]; then
				info "=== conf: $file -> ${tgtfile}.conf"
				sed "s|@METADIR@|$DSTDIR/meta|g" <$FLAVOUR_DIR/$file >conf/$file
			else
				info "=== conf: $file is empty"
				echo -n "" >conf/$file
			fi
			grep "^require conf/$file" conf/${tgtfile}.conf &>/dev/null || echo "require conf/$file" >>conf/${tgtfile}.conf
		done
	done

popd >/dev/null #}

cat <<EOF
=====================================================================

Build environment is ready. To use it, run:

EOF

echo ". $BUILDDIR/agl-init-build-env"

cat <<EOF

then

# bitbake agl-demo-platform

=====================================================================
EOF


## Install bmap-tools (recommended)

Bmap-tools is a generic tool for creating the block map (bmap) from a sparse file and copy a raw image using the block map. The idea is that large files, like raw system image files, can be copied or flashed a lot faster and more reliably with bmaptool than with traditional tools, like "dd" or "cp".

Bmap-tools sources are available on [github:intel/bmap-tools](https://github.com/intel/bmap-tools).
[Full documentation](https://source.tizen.org/documentation/reference/bmaptool) is also available (a bit old, but still relevant).

**Note**: Even if Bmap-tools is not strictly required for operation, it's highly recommended. You can still skip this section if you do not wish to install bmap-tools or don't find any package for it.

### RPM-based distribution

Bmap-tools is available as a noarch package here: [bmap-tools-3.3-1.17.1.noarch.rpm](http://iot.bzh/download/public/tools/bmap-tools/bmap-tools-3.3-1.17.1.noarch.rpm)

For example, on Opensuse 42.X:

```bash
sudo zypper in http://iot.bzh/download/public/tools/bmap-tools/bmap-tools-3.3-1.17.1.noarch.rpm
```

### Debian-based distribution (inc. Ubuntu)

bmap-tool is available in Debian distribution (not tested).

```bash
sudo apt-get install bmap-tools
```

## Download AGL image and bmap file

Download the image and the associated bmap file:

* the raw image (*.wic.xz)
* the bmap file (*.wic.bmap)

## Write a SDcard

1. Insert a SDcard (minimum 2GB)

2. Find the removable device for your card:

    The following commands which lists all removable disks can help to find the information:

    ```bash
    $ lsblk -dli -o NAME,TYPE,HOTPLUG | grep "disk\s+1$"
    sdk  disk       1
    ```

    Here, the device we'll use is /dev/sdk.

    Alternatively, a look at the kernel log will help:

    ```bash
    $ dmesg | tail -50
    ...
    [710812.225836] sd 18:0:0:0: Attached scsi generic sg12 type 0
    [710812.441406] sd 18:0:0:0: [sdk] 31268864 512-byte logical blocks: (16.0 GB/14.9 GiB)
    [710812.442016] sd 18:0:0:0: [sdk] Write Protect is off
    [710812.442019] sd 18:0:0:0: [sdk] Mode Sense: 03 00 00 00
    [710812.442642] sd 18:0:0:0: [sdk] No Caching mode page found
    [710812.442644] sd 18:0:0:0: [sdk] Assuming drive cache: write through
    [710812.446794]  sdk: sdk1
    [710812.450905] sd 18:0:0:0: [sdk] Attached SCSI removable disk
    ...
    ```

    For the rest of these instructions, we assume that the variable $DEVICE contains the name of the device to write to (/dev/sd? or /dev/mmcblk?). Export the variable:

    ```bash
    export DEVICE=/dev/[replace-by-your-device-name]
    ```

3. If the card is mounted automatically, unmount it through desktop helper or directly wih the command line:

    ```bash
    sudo umount ${DEVICE}*
    ```

4. Write onto SDcard

    Using bmap-tools:

    ```bash
    $ sudo bmaptool copy *.wic.xz $DEVICE
    bmaptool: info: discovered bmap file 'XXXXXXXXX.wic.bmap'
    bmaptool: info: block map format version 2.0
    bmaptool: info: 524288 blocks of size 4096 (2.0 GiB), mapped 364283 blocks (1.4 GiB or 69.5%)
    bmaptool: info: copying image 'XXXXXXXX.wic.xz' to block device '/dev/sdk' using bmap file 'XXXXXXXX.wic.bmap'
    bmaptool: info: 100% copied
    bmaptool: info: synchronizing '/dev/sdk'
    bmaptool: info: copying time: 4m 26.9s, copying speed 5.3 MiB/sec
    ```

    Using standard dd command (more dangerous):

    ```bash
    xz -cd *.wic.xz | sudo dd of=$DEVICE bs=4M; sync
    ```

